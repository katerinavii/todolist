version: '3.9'
services:
  postgres:
    image: postgres:14.5
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    env_file:
      - app/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend_nw

  migrations:
    build:
      context: .
    env_file:
      - app/.env
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate"
    networks:
      - backend_nw

  api:
    build:
      context: .
    restart: always
    env_file:
      - app/.env
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: >
      sh -c "python3 manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/ping/ || exit 1
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - backend_nw
      - frontend_nw
    volumes:
      - ./app/:/opt/todolist

  frontend:
    image: sermalenk/skypro-front:lesson-37
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - frontend_nw
#    volumes:
#      - deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf


volumes:
  pg_data_todolist:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge